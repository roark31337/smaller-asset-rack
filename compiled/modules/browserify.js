// Generated by CoffeeScript 1.7.1
(function() {
  var Asset, browserify, fs, pathutil, uglify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  pathutil = require('path');

  browserify = require('browserify');

  uglify = require('uglify-js');

  Asset = require('../index').Asset;

  exports.BrowserifyAsset = (function(_super) {
    __extends(BrowserifyAsset, _super);

    function BrowserifyAsset() {
      return BrowserifyAsset.__super__.constructor.apply(this, arguments);
    }

    BrowserifyAsset.prototype.mimetype = 'text/javascript';

    BrowserifyAsset.prototype.create = function(options) {
      var agent, handler, _i, _len, _ref;
      this.filename = options.filename;
      this.toWatch = pathutil.dirname(pathutil.resolve(this.filename));
      this.require = options.require;
      this.debug = options.debug || false;
      this.compress = options.compress;
      if (this.compress == null) {
        this.compress = false;
      }
      this.debowerify = options.debowerify;
      if (this.debowerify == null) {
        this.debowerify = false;
      }
      this.extensionHandlers = options.extensionHandlers || [];
      agent = browserify({
        watch: false,
        debug: this.debug
      });
      _ref = this.extensionHandlers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        agent.register(handler.ext, handler.handler);
      }
      agent.add(this.filename);
      if (this.require) {
        agent.require(this.require);
      }
      if (this.debowerify) {
        agent.transform(require('debowerify'));
      }
      return agent.bundle((function(_this) {
        return function(err, js) {
          var contents;
          if (err != null) {
            return _this.emit('error', err);
          }
          if (_this.compress) {
            contents = uglify.minify(js, {
              fromString: true
            }).code;
          } else {
            contents = js;
          }
          return _this.emit('created', {
            contents: contents
          });
        };
      })(this));
    };

    return BrowserifyAsset;

  })(Asset);

}).call(this);
